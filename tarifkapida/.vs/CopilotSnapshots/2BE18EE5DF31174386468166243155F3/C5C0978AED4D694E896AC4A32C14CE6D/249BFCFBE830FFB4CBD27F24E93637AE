using Azure.Core;
using Microsoft.AspNetCore.Mvc;
using tarifkapida.Interfaces;
using tarifkapida.Models.DTO;
using tarifkapida.Models.DTOs;
using tarifkapida.Models.Requests;

namespace tarifkapida.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UserProfileController : ControllerBase
    {
        readonly IUserProfileService userProfileService;

        public UserProfileController(IUserProfileService userProfileService)
        {
            this.userProfileService = userProfileService;
        }

        [HttpGet("GetUserProfile/{userId}")]
        public async Task<ActionResult<UserProfileDto?>> GetUserProfile(int userId)
        {
            var profile = await userProfileService.GetUserProfileAsync(userId);
            if (profile == null)
            {
                return NotFound();
            }
            return Ok(profile);
        }
        [HttpPost("UpdateUserProfile")]
        public async Task<ActionResult<UserProfileDto>> UpdateUserProfile([FromBody] UserProfileRequest request)
        {
            if (request == null || request.UserId <= 0)
            {
                return BadRequest("Invalid user profile data.");
            }
            var updatedProfile = await userProfileService.UpdateUserProfileAsync(request);
            return Ok(updatedProfile);
        }
        [HttpPost("CreateUserProfile")]
        public async Task<ActionResult<UserProfileDto>> CreateUserProfile([FromBody] UserProfileRequest request)
        {
            if (request == null || request.UserId <= 0)
            {
                return BadRequest("Invalid user profile data.");
            }
            var createdProfile = await userProfileService.CreateUserProfileAsync(request);
            return CreatedAtAction(nameof(GetUserProfile), new { userId = createdProfile.UserId }, createdProfile);
        }
        [HttpGet("ProfileExists/{userId}")]
        public async Task<ActionResult<bool>> ProfileExists(int userId)
        {
            var exists = await userProfileService.ProfileExistsAsync(userId);
            return Ok(exists);
        }   
        [HttpPost("UploadUserProfilePhoto")]
        public async Task<ActionResult> UploadProfilePhoto([FromBody] UserProfileRequest request)
        {
            try
            {
                var updatedProfile = await userProfileService.UploadUserProfilePhotoAsync(request);
                return Ok(new { ProfileImageUrl = updatedProfile.ProfileImageUrl });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }
        [HttpGet("GetUserProfilePhoto/{userId}")]
        public async Task<ActionResult<string>> GetUserProfilePhoto(int userId)
        {
            var photoUrl = await userProfileService.GetUserProfilePhotoAsync(userId);
            if (string.IsNullOrEmpty(photoUrl))
            {
                return NotFound("Profile photo not found.");
            }
            return Ok(photoUrl);
        }
        [HttpPost("DeleteUserProfilePhoto/{userId}")]
        public async Task<IActionResult> DeleteProfilePhoto(int userId)
        {
            var profile = await userProfileService.GetUserProfileAsync(userId);
            if (profile == null || string.IsNullOrEmpty(profile.ProfileImageUrl))
            {
                return NotFound("Profile photo not found.");
            }
            await DeleteFileAsync(profile.ProfileImageUrl);
            await userProfileService.DeleteUserProfilePhotoAsync(userId);
            return NoContent();
        }        
        [HttpGet("SaveFile")]
        private async Task<string> SaveFileAsync(IFormFile file)
        {
            var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "images", "ProfilePhoto");
            if (!Directory.Exists(uploadsFolder))
                Directory.CreateDirectory(uploadsFolder);

            var uniqueFileName = Guid.NewGuid().ToString() + Path.GetExtension(file.FileName);
            var filePath = Path.Combine(uploadsFolder, uniqueFileName);

            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await file.CopyToAsync(fileStream);
            }

            return $"/images/ProfilePhoto/{uniqueFileName}";
        }

        [HttpPut("UpdateNotificationSettings")]
        public async Task<IActionResult> UpdateNotificationSettings([FromBody] NotificationSettingsRequest request)
        {
            if (request == null || request.UserId <= 0)
            {
                return BadRequest("Invalid notification settings data.");
            }
            var updatedSettings = await userProfileService.UpdateNotificationSettingsAsync(request.UserId, request);
            if (updatedSettings == null)
            {
                return NotFound("User profile not found.");
            }
            return Ok(updatedSettings);
        }
        [HttpGet("GetNotificationSettings/{userId}")]
        public async Task<ActionResult<NotificationSettingsDto>> GetNotificationSettings(int userId)
        {
            var settings = await userProfileService.GetNotificationSettingsAsync(userId);
            if (settings == null)
            {
                return NotFound("Notification settings not found.");
            }
            return Ok(settings);
        }
        [HttpGet("LinkSocialAccount")]
        public async Task<IActionResult> LinkSocialAccount([FromQuery] int userId, [FromQuery] string provider, [FromQuery] string accessToken)
        {
            if (userId <= 0 || string.IsNullOrEmpty(provider) || string.IsNullOrEmpty(accessToken))
            {
                return BadRequest("Invalid parameters for linking social account.");
            }
            var request = new SocialAccountRequest { AccessToken = accessToken };
            var result = await userProfileService.LinkSocialAccountAsync(userId, provider, request);
            if (result != null)
            {
                return Ok("Social account linked successfully.");
            }
            return BadRequest("Failed to link social account.");
        }
        [HttpGet("GetLinkedSocialAccounts/{userId}")]
        public async Task<ActionResult<List<SocialAccountDto>>> GetLinkedSocialAccounts(int userId)
        {
            if (userId <= 0)
            {
                return BadRequest("Invalid user ID.");
            }
            var accounts = await userProfileService.GetLinkedSocialAccountsAsync(userId);
            if (accounts == null || accounts.Count == 0)
            {
                return NotFound("No linked social accounts found.");
            }
            return Ok(accounts);
        }
        private async Task DeleteFileAsync(string filePath)
        {
            var fullPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", filePath.TrimStart('/'));

            if (System.IO.File.Exists(fullPath))
            {
                System.IO.File.Delete(fullPath);
            }
        }
    }
}
